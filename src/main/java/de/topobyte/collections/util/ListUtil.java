// Copyright 2015 Sebastian Kuerten
//
// This file is part of collections-utils.
//
// collections-utils is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// collections-utils is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with collections-utils. If not, see <http://www.gnu.org/licenses/>.

package de.topobyte.collections.util;

import java.util.List;
import java.util.Random;

/**
 * @author Sebastian Kuerten (sebastian@topobyte.de)
 *
 *         Utilities for lists.
 */
public class ListUtil
{

	/**
	 * @param <T>
	 *            the type of the list (implicit).
	 * @param list
	 *            the list to shuffle.
	 * @param nswaps
	 *            the number of swaps to perform.
	 */
	public static <T> void shuffle(List<T> list, int nswaps)
	{
		int size = list.size();
		Random random = new Random();
		for (int i = 0; i < nswaps; i++) {
			int a = random.nextInt(size);
			int b = random.nextInt(size);
			T t = list.get(a);
			list.set(a, list.get(b));
			list.set(b, t);
		}
	}

	public static <T> void swap(List<T> list, int a, int b)
	{
		T tmp = list.get(a);
		list.set(a, list.get(b));
		list.set(b, tmp);
	}

	/*
	 * Generated by GenListToArray
	 */

	public static byte[] asByteArray(List<Byte> list)
	{
		int n = list.size();
		byte[] array = new byte[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static short[] asShortArray(List<Short> list)
	{
		int n = list.size();
		short[] array = new short[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static int[] asIntArray(List<Integer> list)
	{
		int n = list.size();
		int[] array = new int[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static long[] asLongArray(List<Long> list)
	{
		int n = list.size();
		long[] array = new long[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static float[] asFloatArray(List<Float> list)
	{
		int n = list.size();
		float[] array = new float[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static double[] asDoubleArray(List<Double> list)
	{
		int n = list.size();
		double[] array = new double[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static char[] asCharArray(List<Character> list)
	{
		int n = list.size();
		char[] array = new char[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

	public static boolean[] asBooleanArray(List<Boolean> list)
	{
		int n = list.size();
		boolean[] array = new boolean[n];
		for (int i = 0; i < n; i++) {
			array[i] = list.get(i);
		}
		return array;
	}

}
